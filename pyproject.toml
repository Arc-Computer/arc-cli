[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "arc-cli"
version = "0.1.0"
description = "AI Research Coalition Evaluation Platform"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "ARC Team", email = "team@arc-eval.org"},
]
keywords = ["ai", "evaluation", "testing", "agents", "scenarios"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Testing",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.23.0",
    "pydantic>=2.0.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.11.0",
    "psycopg2-binary>=2.9.0",
    "asyncpg>=0.28.0",
    "redis>=4.6.0",
    "httpx>=0.24.0",
    "aiohttp>=3.9.0",
    "openai>=1.0.0",
    "anthropic>=0.3.0",
    "google-generativeai>=0.3.0",
    "boto3>=1.28.0",
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "scipy>=1.11.0",
    "scikit-learn>=1.3.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "plotly>=5.15.0",
    "rich>=13.0.0",
    "click>=8.1.0",
    "python-dotenv>=1.0.0",
    "structlog>=23.1.0",
    "tenacity>=8.2.0",
    "prometheus-client>=0.17.0",
    "modal>=1.0.0",
    "opentelemetry-api>=1.0.0",
    "opentelemetry-sdk>=1.0.0",
    "python-Levenshtein>=0.20.0",
    "greenlet>=3.0.0",
    "pyyaml>=6.0.0",
    "langchain>=0.1.0",
    "langchain-openai>=0.0.5",
    "langchain-core>=0.1.0",
    "langchain-community>=0.0.10",
    "tiktoken>=0.5.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "black>=23.7.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.4.0",
    "pre-commit>=3.3.0",
    "ipython>=8.14.0",
    "ipdb>=0.13.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "factory-boy>=3.3.0",
    "faker>=19.2.0",
]

docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.24.0",
    "myst-parser>=2.0.0",
]

[project.urls]
Homepage = "https://github.com/arc-eval/arc"
Documentation = "https://arc-eval.readthedocs.io"
Repository = "https://github.com/arc-eval/arc"
Issues = "https://github.com/arc-eval/arc/issues"

[project.scripts]
arc = "arc.cli:main"
arc-server = "arc.api:run"

[tool.setuptools.packages.find]
where = ["."]
include = ["arc*"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true
strict_optional = true
disallow_untyped_defs = true

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests", "arc/tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = [
    "--strict-markers",
    "--tb=short",
]
asyncio_default_fixture_loop_scope = "function"
# Coverage options - uncomment if pytest-cov is installed
# addopts = [
#     "--strict-markers",
#     "--tb=short",
#     "--cov=arc",
#     "--cov-report=term-missing",
#     "--cov-report=html",
#     "--cov-report=xml",
# ]

[tool.coverage.run]
source = ["arc"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
    "*/config/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]